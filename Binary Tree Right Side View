 vector<int> rightSideView(TreeNode* root) {
        
        queue<TreeNode*> q;
        vector<int> res;
        if(root == NULL)
            return res;
        q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            for(int i = 1; i <= n ; i++)
            {
                TreeNode* node = q.front();
                q.pop();
                
                if(i == n)
                {
                    res.push_back(node->val);
                }
                
                if(node->left)
                    q.push(node->left);
                 
                if(node->right)
                    q.push(node->right);
            }
        }
        return res;
    }


// RECURSIVE
vector<int> res;
    
    void rightSideViewUtil(TreeNode* root, int level, int *max_level)
    {
        if(root == NULL)
            return;
        
        if(*max_level < level)
        {
            res.push_back(root->val);
            *max_level = level;
        }
        rightSideViewUtil(root->right, level + 1, max_level);
        rightSideViewUtil(root->left, level + 1, max_level);
        
    }
    vector<int> rightSideView(TreeNode* root) {
         int max_level = 0;
         rightSideViewUtil(root, 1, &max_level );
        return res;
    }

void combinationSumUtil(vector<int>& candidates, vector<vector<int>> &res, vector<int> &combination, int target, int begin)
    {
        if(target == 0)
        {
            res.push_back(combination);
            return;
        }
        
        for(int i = begin; i < candidates.size() && target >= candidates[i]; i++ )
        {
            combination.push_back(candidates[i]);
            combinationSumUtil(candidates, res, combination, target - candidates[i], i);
            combination.pop_back();
            
            
        }
        
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> combination;
        vector<vector<int>> res;
        combinationSumUtil(candidates, res, combination, target , 0);
        return res;
        
    }

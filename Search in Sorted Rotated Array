/*
1) Find middle point mid = (l + h)/2
2) If key is present at middle point, return mid.
3) Else If arr[l..mid] is sorted
    a) If key to be searched lies in range from arr[l]
       to arr[mid], recur for arr[l..mid].
    b) Else recur for arr[mid+1..h]
4) Else (arr[mid+1..h] must be sorted)
    a) If key to be searched lies in range from arr[mid+1]
       to arr[h], recur for arr[mid+1..h].
    b) Else recur for arr[l..mid] 
    */
    
    int searchSortedRotated(int* arr, int l, int h, int key)
{
    if(l > h)
        return -1;
    int mid = (l + h) / 2;
    
    if(arr[mid] == key)
        return mid;
    
    if(arr[l] <= arr[mid])
    {
        if(key>=arr[l] && key <= arr[mid])
            return searchSortedRotated(arr,l,mid-1,key);
        return searchSortedRotated(arr,mid+1,h,key);
        
    }
    else
    {
        if(key>=arr[mid] && key <= arr[h])
             return searchSortedRotated(arr,mid+1,h,key);
         return searchSortedRotated(arr,l,mid-1,key);
    }
    
}

int search(int* nums, int numsSize, int target){
    int l = 0;
    int h = numsSize - 1;
    return searchSortedRotated(nums, l, h, target );

}

    
    

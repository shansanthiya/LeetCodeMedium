 unordered_map<int, int> count;
    int maxCount = 0;
    vector<int> findFrequentTreeSum(TreeNode* root) {
        dfs(root);
        vector<int> res;
        unordered_map<int, int>:: iterator itr;
        for (itr = count.begin(); itr != count.end(); itr++)
            if (itr->second == maxCount)
                res.push_back(itr->first);
        return res;
    }


    int dfs(TreeNode* root) 
    {
        if (root == NULL) 
            return 0;
        int sum = dfs(root->left) + dfs(root->right) + root->val;
        count[sum] += 1;
        maxCount = max(maxCount, count[sum]);
        return sum;
    }
